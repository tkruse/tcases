<?xml version="1.0"?>
<!DOCTYPE module PUBLIC
        "-//Puppy Crawl//DTD Check Configuration 1.2//EN"
        "http://www.puppycrawl.com/dtds/configuration_1_2.dtd">

<module name="Checker">
    <property name="charset" value="UTF-8"/>
    <!--
        If you set the basedir property below, then all reported file
        names will be relative to the specified directory. See
        http://checkstyle.sourceforge.net/5.x/config.html#Checker

        <property name="basedir" value="${basedir}"/>
    -->
    <property name="localeCountry" value="EN"/>
    <property name="localeLanguage" value="en"/>

    <!-- Checks for whitespace                               -->
    <!-- See http://checkstyle.sf.net/config_whitespace.html -->
    <module name="FileTabCharacter">
        <property name="eachLine" value="true"/>
    </module>

    <module name="NewlineAtEndOfFile">
        <property name="lineSeparator" value="lf"/>
    </module>

    <module name="TreeWalker">
        <module name="LineLength">
            <property name="max" value="180"/>
            <property name="ignorePattern" value="^package.*|^import.*|a href|href|http://|https://|ftp://"/>
        </module>

        <module name="AnnotationLocation"/>
        <module name="CatchParameterName"/>
        <module name="DefaultComesLast"/>
        <!--<module name="AnnotationUseStyle"/> too strict-->
        <!--<module name="FinalLocalVariable"/> many warnings -->
        <!--<module name="Indentation"/> many warnings -->
        <module name="VisibilityModifier"/>

        <!--<module name="UncommentedMain"/>-->
        <module name="ThrowsCount"/>
        <module name="RequireThis"/>
        <!--<module name="MissingOverride"/>-->
        <module name="InnerAssignment"/>


        <!-- Checks for Naming Conventions.                  -->
        <!-- See http://checkstyle.sf.net/config_naming.html -->
        <module name="ConstantName">
            <!-- 'logger' static reference -->
            <property name="format" value="^(([A-Z][A-Z0-9]*(_[A-Z0-9]+)*)|(logger))$"/>
        </module>
        <module name="MemberName"/>
        <module name="MethodName"/>
        <module name="PackageName"/>
        <module name="ParameterName"/>
        <module name="TypeName"/>
        <module name="StaticVariableName"/>

        <!-- Checks for imports                              -->
        <!-- See http://checkstyle.sf.net/config_import.html -->
        <module name="IllegalImport"/> <!-- defaults to sun.* packages -->
        <module name="RedundantImport"/>
        <module name="UnusedImports"/>

        <module name="ArrayTypeStyle"/>
        <module name="MissingSwitchDefault"/>
        <module name="FallThrough"/>
        <module name="UpperEll"/>

        <!-- Checks for whitespace                               -->
        <module name="NoWhitespaceAfter">
            <property name="tokens" value="BNOT, DEC, DOT, INC, LNOT, UNARY_MINUS, UNARY_PLUS"/>
        </module>
        <module name="NoWhitespaceBefore"/>
        <module name="OperatorWrap"/>
        <module name="ParenPad"/>
        <module name="TypecastParenPad"/>
        <module name="MethodParamPad"/>
        <module name="ParenPad"/>
        <module name="NeedBraces"/>
        <module name="WhitespaceAfter"/>
        <module name="WhitespaceAround">
            <!--all except rcurly-->
            <property name="tokens" value="ASSIGN, BAND, BAND_ASSIGN, BOR, BOR_ASSIGN, BSR, BSR_ASSIGN,
            BXOR, BXOR_ASSIGN, COLON, DIV, DIV_ASSIGN, EQUAL, GE, GT, LAND, LCURLY, LE, LITERAL_ASSERT,
            LITERAL_CATCH, LITERAL_DO, LITERAL_ELSE, LITERAL_FINALLY, LITERAL_FOR, LITERAL_IF, LITERAL_RETURN,
            LITERAL_SYNCHRONIZED, LITERAL_TRY, LITERAL_WHILE, LOR, LT, MINUS, MINUS_ASSIGN, MOD, MOD_ASSIGN,
            NOT_EQUAL, PLUS, PLUS_ASSIGN, QUESTION, SL, SLIST, SL_ASSIGN, SR, SR_ASSIGN, STAR,
            STAR_ASSIGN, TYPE_EXTENSION_AND"/>
        </module>

        <!-- Modifier Checks                                    -->
        <!-- See http://checkstyle.sf.net/config_modifiers.html -->
        <module name="ModifierOrder"/>
        <module name="RedundantModifier"/>
        <module name="ModifiedControlVariable"/>
        <module name="OneTopLevelClass"/>
        <module name="OneStatementPerLine"/>
        <module name="OverloadMethodsDeclarationOrder"/>
        <module name="VariableDeclarationUsageDistance"/>
        <module name="ParameterAssignment"/>
        <module name="NoLineWrap"/>
        <module name="MultipleVariableDeclarations"/>
        <module name="NoFinalizer"/>
        <module name="MutableException"/>



        <module name="SeparatorWrap">
            <property name="id" value="SeparatorWrapDot"/>
            <property name="tokens" value="DOT"/>
            <property name="option" value="nl"/>
        </module>
        <module name="SeparatorWrap">
            <property name="id" value="SeparatorWrapComma"/>
            <property name="tokens" value="COMMA"/>
            <property name="option" value="EOL"/>
        </module>
        <module name="SeparatorWrap">
            <property name="id" value="SeparatorWrapMethodRef"/>
            <property name="tokens" value="METHOD_REF"/>
            <property name="option" value="nl"/>
        </module>

        <module name="EmptyCatchBlock">
            <property name="commentFormat" value="$^"/>
        </module>

        <!-- Checks for common coding problems               -->
        <!-- See http://checkstyle.sf.net/config_coding.html -->
        <module name="EqualsHashCode"/>
        <module name="HiddenField">
            <property name="tokens" value="VARIABLE_DEF"/>
        </module>

        <module name="RegexpSinglelineJava">
            <!-- . matches any character, so we need to escape it and use \. to match dots. -->
            <!--<property name="format" value="System\.out\.println"/>-->
            <property name="ignoreComments" value="true"/>
        </module>

        <module name="RegexpSinglelineJava">
            <!-- Use specific PMD warnings, like @SuppressWarnings("PMD.foobar") -->
            <property name="format" value="@SuppressWarnings(&quot;PMD&quot;)"/>
            <property name="ignoreComments" value="true"/>
        </module>

        <module name="RegexpSinglelineJava">
            <!-- Don't use Lombok @Singular annotation, because it generates default non-null collection values -->
            <property name="format" value="@Singular"/>
            <property name="ignoreComments" value="true"/>
        </module>

        <module name="RegexpSinglelineJava">
            <!-- Don't use Lombok @AllArgsConstructor private or protected only allowed -->
            <!-- Because it causes bugs when changing field order. When using private constructor, use factory method static Foo of(...) if needed. -->
            <property name="format" value="@AllArgsConstructor\s*(|\(.*access = AccessLevel\.(?!(PRIVATE|PROTECTED).*).*\))*$"/>
            <property name="ignoreComments" value="true"/>
            <property name="message" value="@AllArgsConstructor access level allowed only private/protected. &quot;@AllArgsConstructor(access = AccessLevel.PRIVATE) or @AllArgsConstructor(access = AccessLevel.PROTECTED)&quot;"/>
        </module>

        <module name="ImportControl">
            <!--This location is relative to the checkstyle invocation :-(( -->
            <property name="file" value="${basedir}/import-control.xml"/>
        </module>
    </module>
</module>
